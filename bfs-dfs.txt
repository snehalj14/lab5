#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

// Function to perform parallel Breadth First Search (BFS)
void parallelBFS(vector<vector<int>>& graph, int startVertex) {
    int numVertices = graph.size();

    vector<bool> visited(numVertices, false);
    queue<int> q;

    visited[startVertex] = true;
    q.push(startVertex);

    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();
        cout << "Visited: " << currentVertex << endl;

        #pragma omp parallel for
        for (int i = 0; i < graph[currentVertex].size(); ++i) {
            int adjacentVertex = graph[currentVertex][i];
            if (!visited[adjacentVertex]) {
                visited[adjacentVertex] = true;
                q.push(adjacentVertex);
            }
        }
    }
}

// Function to perform parallel Depth First Search (DFS)
void parallelDFS(vector<vector<int>>& graph, int startVertex) {
    int numVertices = graph.size();

    vector<bool> visited(numVertices, false);
    stack<int> s;

    s.push(startVertex);

    while (!s.empty()) {
        int currentVertex = s.top();
        s.pop();

        if (!visited[currentVertex]) {
            visited[currentVertex] = true;
            cout << "Visited: " << currentVertex << endl;

            #pragma omp parallel for
            for (int i = 0; i < graph[currentVertex].size(); ++i) {
                int adjacentVertex = graph[currentVertex][i];
                if (!visited[adjacentVertex]) {
                    s.push(adjacentVertex);
                }
            }
        }
    }
}

int main() {
    int numVertices = 6;
    vector<vector<int>> graph(numVertices);

    // Add edges to the graph (undirected)
    graph[0].push_back(1);
    graph[0].push_back(2);
    graph[1].push_back(3);
    graph[1].push_back(4);
    graph[2].push_back(5);

    cout << "Parallel Breadth First Search (BFS):" << endl;
    parallelBFS(graph, 0);

    cout << endl;

    cout << "Parallel Depth First Search (DFS):" << endl;
    parallelDFS(graph, 0);

    return 0;
}